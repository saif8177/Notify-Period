var capacitorAdmobAds = (function (exports, core) {
    'use strict';

    exports.BannerSize = void 0;
    (function (BannerSize) {
        BannerSize["BANNER"] = "BANNER";
        BannerSize["LARGE_BANNER"] = "LARGE_BANNER";
        BannerSize["MEDIUM_RECTANGLE"] = "MEDIUM_RECTANGLE";
        BannerSize["FULL_BANNER"] = "FULL_BANNER";
        BannerSize["LEADERBOARD"] = "LEADERBOARD";
    })(exports.BannerSize || (exports.BannerSize = {}));
    exports.BannerPosition = void 0;
    (function (BannerPosition) {
        BannerPosition["TOP"] = "top";
        BannerPosition["BOTTOM"] = "bottom";
    })(exports.BannerPosition || (exports.BannerPosition = {}));

    const AdmobAds = core.registerPlugin('AdmobAds', {
        web: () => Promise.resolve().then(function () { return web; }).then(m => new m.AdmobAdsWeb()),
    });

    class AdmobAdsWeb extends core.WebPlugin {
        async showBannerAd(options) {
            throw new Error('Method not implemented.');
        }
        async hideBannerAd() {
            throw new Error('Method not implemented.');
        }
        async resumeBannerAd() {
            throw new Error('Method not implemented.');
        }
        async removeBannerAd() {
            throw new Error('Method not implemented.');
        }
        async loadNativeAd(options) {
            throw new Error('Method not implemented.');
        }
        async triggerNativeAd(options) {
            throw new Error('Method not implemented.');
        }
        async loadRewardedVideoAd(options) {
            throw new Error('Method not implemented.');
        }
        async showRewardedVideoAd() {
            throw new Error('Method not implemented.');
        }
        async loadRewardedInterstitialAd(options) {
            throw new Error('Method not implemented.');
        }
        async showRewardedInterstitialAd() {
            throw new Error('Method not implemented.');
        }
        async loadInterstitialAd(options) {
            throw new Error('Method not implemented.');
        }
        async showInterstitialAd() {
        }
    }

    var web = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdmobAdsWeb: AdmobAdsWeb
    });

    exports.AdmobAds = AdmobAds;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({}, capacitorExports);
//# sourceMappingURL=plugin.js.map
