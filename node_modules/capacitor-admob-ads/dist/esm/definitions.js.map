{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAmLA,MAAM,CAAN,IAAY,UAMX;AAND,WAAY,UAAU;IACpB,+BAAiB,CAAA;IACjB,2CAA6B,CAAA;IAC7B,mDAAqC,CAAA;IACrC,yCAA2B,CAAA;IAC3B,yCAA2B,CAAA;AAC7B,CAAC,EANW,UAAU,KAAV,UAAU,QAMrB;AAED,MAAM,CAAN,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,6BAAW,CAAA;IACX,mCAAiB,CAAA;AACnB,CAAC,EAHW,cAAc,KAAd,cAAc,QAGzB","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface AdmobAdsPlugin {\n\n  loadNativeAd(options: NativeAdOptions): Promise<{ ads: AdResult[] }>;\n\n  triggerNativeAd(options: NativeAdTriggerOptions): void;\n\n  loadRewardedVideoAd(options: RewaredVideoAdOptions): Promise<void>;\n\n  showRewardedVideoAd(): Promise<void>;\n\n  addListener(\n    eventName: 'rewardedVideoAdShowed',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'rewardedVideoAdFailedToShow',\n    listenerFunc: (error: { message: string }) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'rewardedVideoAdDismissed',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'rewardedVideoAdClicked',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'rewardedVideoAdImpression',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'rewardedVideoAdOnRewarded',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  loadRewardedInterstitialAd(options: RewaredInterstitialAdOptions): Promise<void>;\n\n  showRewardedInterstitialAd(): Promise<void>;\n\n  addListener(\n    eventName: 'rewardedInterstitialAdShowed',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'rewardedInterstitialAdFailedToShow',\n    listenerFunc: (error: { message: string }) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'rewardedInterstitialAdDismissed',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'rewardedInterstitialAdClicked',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'rewardedInterstitialAdImpression',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'rewardedInterstitialAdOnRewarded',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  loadInterstitialAd(options: InterstitialAdOptions): Promise<void>;\n\n  showInterstitialAd(): Promise<void>;\n\n  addListener(\n    eventName: 'interstitialAdClicked',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'interstitialAdDismissed',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'interstitialAdFailedToShow',\n    listenerFunc: (error: { message: string }) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'interstitialAdImpression',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'interstitialAdShowed',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  showBannerAd(options: BannerAdOptions): Promise<void>;\n\n  hideBannerAd(): Promise<void>;\n\n  resumeBannerAd(): Promise<void>;\n\n  removeBannerAd(): Promise<void>;\n\n  addListener(\n    eventName: 'bannerAdOpened',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'bannerAdClicked',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'bannerAdImpression',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'bannerAdClosed',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  removeAllListeners(): Promise<void>;\n}\n\nexport interface NativeAdOptions {\n  adId: string\n  isTesting: boolean\n  adsCount: 1 | 2 | 3 | 4 | 5\n}\n\nexport interface AdResult {\n  id: string\n  headline: string\n  body: string\n  advertiser: string\n  icon: string\n  cover: string\n  cta: string\n  adChoicesUrl: string\n}\n\nexport interface NativeAdTriggerOptions {\n  id: string\n}\n\nexport interface RewaredVideoAdOptions {\n  adId: string\n  isTesting: boolean\n}\n\nexport interface RewaredInterstitialAdOptions {\n  adId: string\n  isTesting: boolean\n}\n\nexport interface InterstitialAdOptions {\n  adId: string\n  isTesting: boolean\n}\n\nexport interface BannerAdOptions {\n  adId: string\n  isTesting: boolean\n  adSize: BannerSize,\n  adPosition: BannerPosition\n}\n\nexport enum BannerSize {\n  BANNER = 'BANNER',\n  LARGE_BANNER = 'LARGE_BANNER',\n  MEDIUM_RECTANGLE = 'MEDIUM_RECTANGLE',\n  FULL_BANNER = 'FULL_BANNER',\n  LEADERBOARD = 'LEADERBOARD'\n}\n\nexport enum BannerPosition {\n  TOP = 'top',\n  BOTTOM = 'bottom'\n}"]}